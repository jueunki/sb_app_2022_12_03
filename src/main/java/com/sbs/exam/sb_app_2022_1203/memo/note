alt + 1 : 프로젝트 창 열었다 닫았다 하는것.
ctrl + shift + r : 파일명으로 검색이 가능하다.
ctrl + shift + F10 : 실행.
ctrl + shift + f : 소스코드 정렬.
ctrl + 1 : 오류가 났을때 누르면 insert return이라고 있는데 오류메시지를 고쳐준다.
sout + enter : System.out.println(); 코드를 자동완성 시켜준다. 일일이 작성하지 않아도 된다.

-----------------------------------------------------------------------------------------

이렇게 되어있지않으면 실행이 되지않는다. 둘다 항상 있어야한다. 실수로 지웠다면 작성해줘야 실행 할 수 있다.
public class Main {
    public static void main(String[] args) {


	}
}


-----------------------------------------------------------------------------------------



git init
git remote add origin [원격리포지터리 주소]
git config --globar user.name [이름]
git config --globar user.email [이메일]
git status
git add .
git commit -m "세팅"
git push orgin master


-----------------------------------------------------------------------------------------

MVC
C	controller			말도 안되는거 걸러내는 부분
M	service, repository, db	핵심로직을 다룬다(요리사), repository(db와의 통신을 담당한다.), db(창고)
V	jsp				데이터를 템플릿에 담에서

controller(직원)
service(요리사)
repository(인턴)
db(창고)
컨트롤러에서 말도안되는걸 걸러내고 서비스가 레포지토리에게 디비에서 데이터를 가져오라고 시킨다. 요리해서 컨트롤러가 jsp 뷰에게 요리를 보여준다.
request 요청을하면 브라우저로 간다

MVC 디자인 패턴
M(모델:요리,재료,재료창고)핵심로직을 담당한다
V(뷰:접시(플레이팅))
C(컨트롤러:점원)
--
사람으로 예시를 들었을때
M(영혼)
V(육체)
C(정신,마음,생각)
--
컴퓨터로 예시를 들었을때
M(순수 데이터,로직)
V(프로그램의 눈에 보이는 부분)
C(고객의 요청을 받아서 M과 C를 컨트롤 한다.)
C->M->C->V 순서!
---------------------------
Spring boot의 MVC

M
-서비스
-리포지터리
-DB데이터

V
-JSP
-JS
-CSS
-HTML

C
-컨트롤러
----------------------------------------------
/user.article.doAdd?title=제목1&body=내용1





스프링부트 : 웹프레임워크인데 잘 활용하려면 규칙에 맞게 따라야한다.
컨트롤러 - 서비스 - 리포지터리 - 데이터베이스의 구조로 되어있다.
좌에서 우로만 요청할 수 있다/컨트롤러에서 서비스에게 요청할 수 있고 서비스는 컨트롤러에게 응답만 할 수 있다. 요청은 컨트가 서비스에게만!!
서비스는 자기 의지대로 컨트롤러에게 일을 시킬수 없다
서비스에 있는 로직은 리포지터리에게만 넘길수있다.
-------------------------------------------
==error==
fatal: The current branch master has no upstream branch. To push the current branch and set the remote as upstream, use
git push --set-upstream orgin master  To have this happen automatically for branches without a tracking upstream, see 'push.autoSetupRemote' in 'git help config'.

$ git push --set-upstream origin master
$ git push
-------------------------------------------
==검색할것들==
소프트웨어 디자인 패턴 -> 검색
GOF -> 검색 정처기 시험칠때 많이 봐야한다.

-------------------------------------------
@Autowired  //컴포넌트로 등록되는 것들에게 붙여주면 된다.
객체를 만드는부분에 new로 시작되는 메서드를 붙이지말고 @Autowired를 붙이면 된다.

@Service //서비스에 무조건 붙인다.

Controller는 되느냐 되지않느냐 입력이 되었느냐 되지않았느냐 등등을 확인하는 부분이라서
Service로직을 넣고 사용해서는 안된다!


2020-12-12==
**list에 있는 내장 메서드는 외워야한다.

# void 타입은 return이 없다.

생성자는 객체가 만들어지면서 딱 한번 실행이되는데 생성자를 썼기때문에 publicArticleService가 실행이되고
private ArticleRepository articleRepository;는 실행하면 NULL이 나오게된다.

데이터를 저장하면 램에 저장이되는데 db에 저장을해서 사용해야한다.
ArticleRepository에 있는 컴포넌트를 지우고 @Mapper로 수정한 후
class를 interface로 바꾼다.
 private int articleLastId;
  private List<Article> articles;
  public ArticleRepository(){
    articles = new ArrayList<>();
    articleLastId = 0;


  }

  public void makeTestDate() {

    for (int i = 1; i <= 10; i++) {
      String title = "제목" + i;
      String body = "내용" + i;

      writeArticle(title, body);
    }
  } 는 필요하지않기 때문에 지워주고
  @Mapper
  public interface ArticleRepository {

    public Article writeArticle(String title, String body);

    public Article getArticle(int id);

    public void deleteArticle(int id);
    public List<Article> getArticles();
    public void ModifyArticle(int id, String title, String body);
    }
    메서드 안에있던 내용들을 모두 지워준다.

마이바티스를 추가해야하는데 build.gradle을 클릭해서 들어가보면
implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.0'라고
마이바티스가 추가가 되어있다. -> 스프링이니셜라이즈를 했을때 미리 추가한것이다.
그래서 따로 다시 추가 할 필요는 없다.
마이 바티스를 사용하려면 마리아db가 필수이기때문에 함께 가져왔다.

결과적으로 마이바티스를 쓸것이지만 마리아db가 있어야 사용할 수 있기 때문에
마이바티스와 마리아db는 짝이라고 볼 수 있다.
ArticleService에 articleRepository.makeTestDate();가 오류가 생긴다.
이 부분은 이제 필요가 없기 때문에 지워줘도 된다.
왜? 데이터 베이스에 따로 저장할것이기 때문에 testdatabase는 필요없는것이다.
@Mapper
public interface ArticleRepository {

  // INSERT INTO article SET regDate = NOW(), updateDate = NOW(), title = ?, `body` = ?
  public Article writeArticle(String title, String body);

  // SELECE * FROM article WHERE id = ? 이라고 해야 id를 가져올 수 있다.
  public Article getArticle(int id);
  // DELETE FROM article WHERE id = ?
  public void deleteArticle(int id);

  // SELECT * FROM article ORDER BY id DESC;
  public List<Article> getArticles();

  // UPDATE article SET title = ?, `body` = ? updateDate = NOW() WHERE id = ?

  public void ModifyArticle(int id, String title, String body);
}
SELECT 같은 경우에는 마이바티스가 알아서 다 해주지만 마이바티스에게 힌트를 줘야한다.
mybatis select annotation이라고 구글에 검색한 후
@Select("SELECT * FROM article WHERE id = #{id}") 를 repository안의 select문 위에 붙여준다.
메서드가 실행이 되려면 해당 쿼리가 실행이 되는데 매개변수로 받은 아이디가 치환이된다.
db에 있는 데이터를 받아서 getArticle에 넣어주는 역할을 하는것이다.
http://localhost:8081/user/article/getArticle?id=1이라고 검색하고 로그인을 해주면
{"id":1,"title":"제목1","body":"내용1"}
이렇게 출력이되며 id4는 없기때문에 존재하지않는다는 문구가 뜨게된다.

자동 생성키/동적sql을 모른다면 mybatis select annotation // mybatis insert annotation 등 으로 검색해서 찾아볼 수 있다.
==ArticleRepository에 insert부분
@Insert("INSERT INTO Students (NAME, EMAIL ) VALUES (#{name},#{email})")
  // INSERT INTO article SET regDate = NOW(), updateDate = NOW(), title = ?, `body` = ?
  public Article writeArticle(String title, String body);
여기서 보면 return을 안해주기때문에
@Insert("INSERT INTO Students (NAME, EMAIL ) VALUES (#{name},#{email})")
  public void writeArticle(String title, String body);
  void로 바꿔준다.
    @Insert("INSERT INTO article SET regDate = NOW(), updateDate = NOW(), title = #{title}, `body` = #{body}")
    public Article writeArticle(String title, String body);
    미리 적어둔 sql문구를 적어주고 물음표란에 #{} 등을 잊어서는 안된다.

  @Select("SELECT LAST_INSERT_ID()")
  public int getLastInsertId();
} 를 따로 빼주는 작업을 했다.

------------------------------------------
json viewer라고 있는데 다운로드하면 편하게 볼 수 있다.

git 사용하다가 > 이런 모양의 화살표가 나오면 컨트롤c누르면 빠져나올 수 있다.

result data를 이용해서 중구남방되는 코드를 잡아줄것이다.

브라우져 -> 컨트롤러 -> 서비스 -> 리포지터리 -> DB(MyBatis에서 응답해주고있다.)

표준 보고서 양식을 만들것이다. 각 방향대로 응답할때의 양식을 쓴다.
양식이 지켜야 할 사항 :
- 성공인지 실패인지 쉽게 알 수 있어야한다. -> -1, -2로 나오면 안된다.
컨트롤러가 서비스에게 일을 시킬때 서로 학습을 하려면 서비스의 어떤 기능이 실행되느냐에 따라서 대비해야한다.
새 보고서 양식에는 명확하게 알 수 있어야한다.
무엇때문에 실패/성공했는지!


표준 통일 양식을 만든다 2022-12-14

=======================================
== 복습방법 ==
doAdd 부분적으로 지워서 다시 맞춰가면서 구현해봐야한다.
후에는 전체를 지우고 구현!
지우고 다시 만들어보는것이 중요하다.
지워보고 실행해보고 오류메시지를 읽어보면서 조금쓰고 수정해보고를 계속 반복해줘야한다.

== git == 2022-12-16
git checkout -f . :  가장 마지막에 커밋한 상태로 돌아간다.

ex.
예를들어 https://wiken.io/ken/10787필기 54강 내용으로 가려면 53강으로가서
https://github.com/SangWon7242/sb_app_2022_10_13/commit/7da3fe8bf80709a8a34f53d693acb2499d159bf0
7da3fe8bf80709a8a34f53d693acb2499d159bf0 이부분만 잘라서
git checkout -f 7da3fe8bf80709a8a34f53d693acb2499d159bf0 엔터 하게되면
이때의 프로젝트로 돌아가게된다.
db도 schema.sql에서 확인해서mariadb로 복사해와서 그 당시의 db로 셋팅을 다시해줘야한다.
최신상태로 다시 돌아오려면 git checkout -f master라고 해주면 된다.
개인 깃허브로 하기에는 한계가 있기 때문에
왠만하면 프로젝트를 2개로 돌리고 연습은 강사프젝에서
메인은 개인 프젝으로 하면된다.


==========================

    devtools:
      livereload:
        enabled: true 추가하면 즉각 새로고침이 가능!


============================
눈누(글꼴 받아오기) : https://noonnu.cc/font_page/767
제이쿼리(무조건 최상단에 둔다) : https://cdnjs.com/libraries/jquery
테일윈드(노멀라이즈, 라이브러리 : 노멀라이즈는 기본적으로 태그들이 모양이 희안한데 그걸 평범하게 만들어주는것) : https://tailwindcss.com/docs/installation/play-cdn
테일윈드 cheat sheet에 프론트 용어 검색하면 나온다 참고해서 만들것.
테일윈드 cheat sheet에 docs 클릭하면 어떻게 사용이되는지 확인 할 수 있다!
daisyUI : 테일윈드와 궁합이 잘맞는 프로그램이다.



=============================
grow : 빈공간을 채우고 오른쪽으로 이동한다(상단 메뉴 이동할때 사용했다.)
flex items-center : 로고에 사용했고 중앙으로 오게된다.
mx-auto : 블럭요소 가운데로 정렬(container에 주로 사용)
mt : margin-top라고해서 위쪽 바깥쪽 여백을 주는것.
flex h-full items-center px-3 hover:underline : 수직 중앙정렬 후 마우스를 갖다댔을때 언더라인이 생기면서 클릭 할 수 있게 된다.
onclick="history.back()" : 클릭했을때 뒤로가기(버튼에서 <button type="button" "여기안에 작성">뒤로가기</button>)
<c:if test="false"> : 참이면 보여지고, 참이 아니면 안보여진다.
class="w-full" : 전체 크기만큼 폼을 키울 수 있다. --> modify(글수정 라인 내용수정폼 적용)
rows="10" : 쓸 수 있는 칸을 엔터로 쳤을 때 10칸 사용 할 수 있다는 뜻이며 modify 글수정 라인에 적용했다.
<form class="table-box-type-1" method="POST"> : 에서 method="POST"는 길이에 제한이 없게 해주는 것이다. 폼을 사용할 때는 보통 post방식으로 쓰는것이 좋다.
<input type="hidden" name="id" value="${article.id}"> : hidden은 넘기는 아이디를 보여주지 않게 하기위해 숨기는 기능이다.










--------------------------
colgroup을 주고 col에 너비를 200 준것이다(list의 내용에 들어가는 부분)
<colgroup>
    <col width="200"/>
</colgroup>

-----------------
  @Select("""
      SELECT A.*,
      M.nickname AS extra__writeName
      FROM article AS A
      LEFT JOIN member AS M
      ON A.memberId = M.id
      ORDER BY id DESC
      """)
: 닉네임을 extra__writeName 으로 하고, article에서 집합을 찾는건데 멤버에서 아이디가 일치하면 멤버아이디를 A.id에 넣어주는것이다.
---------------------
두가지가 있다.
SELECT * FROM article; : 순수하게 article 게시물 보여주는것.
SELECT * FROM article; : json을 통해 추가적인 데이터를 가져올때.

------------------
 private void updateForPrintData(int actorId, Article article) { //(int actorId, Article article) : 로그인 한 사람이 누구인지 얻어오고, 해당 게시물을 얻어오는데
    if( article == null ) {
      return;                       // 게시물이 없으면 그대로 있는데 게시물이 있으면
    }
    ResultData actorCanDeleteRd = actorCanDelete(actorId, article);     //actorCanDelete에게 물어본다 해당아이디가 해당 게시물을 삭제 할 수 있는지.
    article.setExtra__actorCanDelete(actorCanDeleteRd.isSuccess());     //그러면 삭제 할 수 있는 가능성을 (actorCanDeleteRd.isSuccess())여기에 심어주는데
  }


------------------
Ut.jsReplace : replace로 된것은 바로뒤 뒤로가기가 안되고 맨처음 place로 가고 중간에 있던 place는 소멸된다.
do로 시작되는 페이지는 머물 수 있는 페이지가 아니다. 잠깐 있는 페이지 이다.
결제 페이지에서 삭제로가고 마지막에 리스트 페이지로 가는데,
뒤로가기를 해서 삭제로 가게되면 결제가 두번되니까 그것을 방지하기 위함

------------------
 public ResultData<Article>의 ResultData<Article>는 결과를 확인하기 위해 만든것이지 ajax 실제로는

 getForPrintArticles
 getArticles -> getForPrintArticle와 getArticles는 차이가 있다.

 getForPrintArticle -> innerJoin해서 추가정보 추가해주고, 현재 로그인 한 회원 가져와서 그 회원이 수정이나 삭제할 수 있는 정보까지 여기(getForPrintArticle)에 넘겨준 상태라고 보면 된다.
 getArticle -> 단순쿼리 SELECT * FROM article;이런식으로 데이터를 받아온다.
-------------------
UserArticleController라인에 변동사항*

HttpSession httpSession 이나

아래에
boolean isLogined = false;
int loginedMemberId = 0;
if (httpSession.getAttribute("loginedMemberId") != null) {
isLogined = true;
loginedMemberId = (int) httpSession.getAttribute("loginedMemberId");
}
이러한 문법이 중복되어 많이 사용되고있는데
request를 조금 더 쉽게 사용 할 수 있는 문법인 RQ를 사용 할 것이다.

HttpSession -> HttpServletRequest req 로 변경
isLogined -> rq.isLogined() 로 변경

boolean isLogined = false;
int loginedMemberId = 0;
if (httpSession.getAttribute("loginedMemberId") != null) {
isLogined = true;
loginedMemberId = (int) httpSession.getAttribute("loginedMemberId");
} -> Rq rq = new Rq(req); 로 변경
-----------------------

interceptor는 컨트롤러 이전에 실행되는것.
-----------------------
2022-12-21 95강의 이론 확인


@Override
  public boolean preHandle(HttpServletRequest req, HttpServletResponse resp, Object handle) throws Exception {
    System.out.println("실행되니?");  // 리스트 버튼 누르면 실행되는부분.
    Rq rq = new Rq(req);
    req.setAttribute("rq", rq);

    return HandlerInterceptor.super.preHandle(req, resp, handle);
  }
--------
UserArticleController의
  Rq rq = new Rq(req); 를 모두
  Rq rq = (Rq) req.getAttribute("rq"); 로 바꿔줬다.

---------
Interceptor를 두개로 만들어줄것인데,
BeforeActionInterceptor는 만인을 위한 interceptor라고 보면되고
NeedLoginInterceptor

BeforeActionInterceptor에서 최초로 한번 실행되고 ArticleController에서 Rq
----------
** 실행 순서도 **
Interceptor 제일 먼저 딱 한번 실행된다.
            @Configuration
            public class MyWebMvcConfigurer implements WebMvcConfigurer {}에서 가장 먼저 실행되면서 정책을 가져온다.
            @Autowired      -> new를 사용하여 번거롭지 않도록 막아주는것
              BeforeActionInterceptor beforeActionInterceptor;


              @Autowired
              NeedLoginInterceptor needLoginInterceptor;

              @Component : 스프링이 관리하는것 자체를 빈 이라고 하는데 빈을 설정하는것이 Component이다.
              preHandle : Rq를 만든것을 직접 다루기 불편해서 대신 다룰수 있게 해주는 요소라고 생각하면 된다.
              req 받은편지 , resp 보낼편지, preHandle 둘을 통합하여 받고 보내는 리모컨
Controller
Service
Repository <-> DB와 통신함
뷰(JSP)

method="post" -> post방식은 보안이 높아서 post방식으로 했다.

=================================
** 화면창을 줄였을때 깨짐 방지
webapp/static/css/common.css 에
/* 커스텀 */
body {
    min-width : 800px;
}

/* 라이브러리 */
.con-min-width {
    min-width : 1080px;
}
그리고
head.jspf에
<header class="con-min-width h-20 bg-gray-300">
class에 con-min-width를 적어주면 일정 800px에 맞게 화면 깨짐이 방지되면서 스크롤바가 생긴다.
=================================
JSP = Servlet : 하나의 파일!
기본 톰캣의 포트번호 : http://localhost:8080
현재는 포트오류가 생길 수 있어서 8081로 했다.
http://localhost:8080/Exam1/user/article/write.jsp -> 나중에 서블릿으로 바껴서 실행하게되는것.
http://localhost:8080/Exam1/user/article/doWrite
게시물을 작성하려면 이러게 두개가 필요한데 이 두개 다 서블릿이다.
그런데 .jsp 는 자바코드보다 html 파일이 더 많고
doWrite 는 자바로 된 로직이 많다.
req -> 받은편지 resp -> 발송될 편지
맨처음엔 자바가 서블릿이면 충분할것이라 생각했지만,
게시물 작성 수정 삭제만 해도 추가 할 것들이 많아지기 때문에
디스패처 서블릿을 하나 만들어서 아래의 요청들을 /user/*로 오게해서 컨트롤러로 보낸다 이를 경량 서블릿이라고 하는데,
컨트롤러에서는 일일이 db접속여부나 한글깨짐여부를 확인 할 필요가 없어진것이다.

사용자 100명이 1번 접속했다,
HttpServletRequest 라는 객체가 100개 생성된다.
HttpServletResponse도 100개,
Session 도 100개 생성된다.

사용자 100명이 2번 접속했다,
HttpServletRequest 라는 객체가 200개 생성된다.
HttpServletResponse도 200개,
HttpSession 은 100개 생성된다.

개인 브라우저는 브라우저마다 딱 하나이다.
ex. 헬스장에 갈때마다 헬스장 락커가 계속 생성되지 않고, 키를 가져가지 않으면 열리지 않듯이
락커를 브라우저라고 생각하면 쉬울것이다.

http://localhost:8080/Exam1/user/article/doModify
http://localhost:8080/Exam2

HttpServletRequest
- 정보 넣기
- 정보 얻기
HttpServletResponse
- 정보 쓰기
HttpSession
- 정보를 편집

정보를 톰캣이 받아서 톰캣 내에 있는 request 서블릿 에게 준다.
그 정보를 다시 컨트롤러에게 준다.
Rq에서 보면
private HttpServletRequest req;
private HttpServletResponse resp;
private HttpSession session;
이들은 각각 사용하는 방법이 다른데 Rq를 사용하여 한번에 다룰 수 있도록 정의한것이다.

-----------------------------
@Data  //@Data : getter and setter를 다 만들어준다.
@NoArgsConstructor
@AllArgsConstructor //@AllArgsConstructor : 모든인스턴스의 변수를 받는 생성자를 만들수있다.
public class Article {
  //테이블의 구조
  private int id;
  private String regDate;
  private String updateDate;
  private int memberId;
  private String title;
  private String body;

  //-> 여기까지 작성한것은 db 정보가 있으니 정보를 담을 수 있는 틀을 만들어준것이다.(안전하게 저장이 된다.)

  //있을수도 있고 없을수도 있는 내용들이라서 extra를 붙여준것인데, 문제는
  private  String extra__writerName;    // innerjoin을 통해서 테이블에 있는것을 조인해서 이름을 가져올 수 있는것이다.

  //-> 여기까지는 쿼리로 한번에 가져올 수 있는데 나머지 아래에 있는것들은 되지않아서 추가연산을 사용한다.

  private boolean extra__actorCanModify;    // 수정 할 수 있는지 없는지에 대한것이다.
  private boolean extra__actorCanDelete;

----------------------------------------
userarticleController와 usermemberController에 있는 rq라인을 모두 지워줬다
스프링에는 특별한 기능이 있기때문!
그리고 userarticleController로 가서
private Rq rq; 와
this.rq = rq; 를 선언해주고,
usermemberController로 가서 private Rq rq; 를 선언 해주고 ctrl + 1 을 눌러서
constructor를 눌러서 this.rq = rq; 가 나오게 클릭해준다.
Rq.java로 가서 상위에 @Component를(<-의존성 주입이라는 기능) 입력해주면 자동으로 의존성 주입 대상이 된다.
@Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS) 도 아래에 입력해주는데
    //@Scope(value = "request", ---> 요청마다 생긴다는것
@Scope는 객체가 하나만 존재하는것이 아니라 각 요청별로 하나씩 존재해야 한다는것.

* 여기 아래에 보면
@Controller
public class UsrArticleController {

  private ArticleService articleService;
  private BoardService boardService; 상위 둘은 딱 한번 생성되는 것! 헬스장 락커같은존재.
  private Rq rq;    고객의 요청으로 존재하는것!
상위 둘과 하위 항목 하나와는 다르다.

==== 설명 총 정리하자면 ====
* @Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS) 풀이
요청별로 하나씩 존재해야하는데 private Rq rq;라는 객체에게 명령을 하면,
proxyMode 얘가 대리자 역할을 해서 각각의 사용자 별로
다른 애들에게 전달을 한다는 뜻!
=============================

<option disabled>게시판을 선택해주세요.</option> 의 disabled를 사용하면
게시판을 선택해주세요. 라는 문구가 비활성화 된다!

required="required" : 입력을 하지 않았을 때 입력란을 작성하라고 문구가 뜨는것!

UserArticleController 에서
int pagesCount = (int)Math.ceil((double) articlesCount / itemsCountInAPage);
이부분이 있는데 풀어서 설명을 하자면
int pagesCount = articlesCount / itemsCountInAPage; 이렇게 해주면 소수점으로 반환되기 때문에
         소수점을 반올림 해줄 수 있는 Math.ceil 이라는 자바 용어를 써줘야하는데
         Math.ceil(articlesCount / itemsCountInAPage);
         오류가 생겨서 마우스를 대서 보면 Math.ceil타입이 더블 타입이라고 나오기 때문에
         int pagesCount = Math.ceil((double) articlesCount / itemsCountInAPage); 이렇게
         더블을 써주고 앞에있는 pagesCount가 int 타입이기 때문에
int pagesCount = (int)Math.ceil((double) articlesCount / itemsCountInAPage); //만약에 글이 20 페이지가 있으면 2 페이지 27개의 글이 있으면 3페이지가 보이게 하는것
이렇게 (int)를 붙여서 형변환까지 해줘야한다. 그러면 게시물의 갯수에 따라서 10게시물 이상이 되면 1,2,3...으로 페이지가 한칸씩 늘어나서 구현되는것을 확인 할 수 있다.
하위에는
    model.addAttribute("pagesCount", pagesCount);  이렇게 값을 넘겨줘야한다.

==============================

<c:set> : 값을 설정하는것!
<c:set var="pageMenuArmLen" value="4" /> : ArmLen은 길이/ 현재 페이지를 기준으로 좌로4칸 우로4칸씩 보여주겠다는것.

--------------------------
head.jspf의
 <meta charset="UTF-8" class="light" data-theme="light"> 중에
 class="light" data-theme="light 는 다크모드를 사용해도 고정으로 밝은모드로 고정시키는것을 의미하며 현재는 설정을 해준 상태이다.
 개인 컴퓨터에서 다크모드를 사용하고 있을 시에 미리 설정해놓고 작업하면 불편함이 없이 좋을것이다.

------------------------
  articleRepository 내용중

  <if text="searchKeyword != ''"> : searchKeyword가 없지않다, 존재한다라는것을 의미

  @Select("""
           <script>
           SELECT COUNT(*) AS cnt
           FROM article AS A
           WHERE 1
           <if test="boardId != 0">
             AND A.boardId = #{boardId}
           </if>
           <if text="searchKeyword != ''">
            <choose>
              <when test="searchKeywordTypeCode == 'title'">
              AND A.title LIKE #{searchKeyword}
              </when>
            </choose>
           </if>
           </script>
           """) 에서 AND A.title LIKE #{searchKeyword} 이부분이 쿼리가 실행되면
           AND A.title = #{searchKeyword} 이렇게 바뀌는데 실제로
           'AND A.title = #{searchKeyword}' 이렇게 자동적으로 따옴표가 붙어서 바뀌게 된다.
           ex -> AND A.title = '하하'
 AND A.title LIKE '%#{searchKeyword}%' 이렇게 나와야 하는데
 AND A.title LIKE '%'#{searchKeyword}'%' 이렇게 바뀌고
 AND A.title LIKE '%'하하'%'이렇게 되기때문에 문법 오류가 생길수있다.
그래서 CONCAT을 붙여서 처리한다.

AND A.title LIKE CONCAT('%', #{searchKeyword}, '%') 이렇게 처리하는것이고,
예를 들어 AND A.title LIKE CONCAT('%', '하하', '%') 이렇게 처리하게되면,
AND A.title LIKE %하하% 이렇게 출력이 된다. -어쩔수없는 마이바티스의 한계라고 한다.

----
  <when test="searchKeywordTypeCode == 'title'">
   AND A.title LIKE CONCAT('%', #{searchKeyword}, '%')
  </when>
  <when test="searchKeywordTypeCode == 'body'">
   AND A.body LIKE CONCAT('%', #{searchKeyword}, '%')
  </when>
 의 다음에 오는 하위의
<otherwise> 는 풀이 하자면 title도 아니고 body도 아니면 이라는 뜻이다.
-----
<otherwise>
              AND (
                A.title LIKE CONCAT('%', #{searchKeyword}, '%')
                OR
                A.body LIKE CONCAT('%', #{searchKeyword}, '%')
              )
            </otherwise>

제목이나 내용이 검색이되면(둘중 하나라도 포함이되면) 검색하겠다라는 뜻!
------

<table class="table table-fixed"> : 의 테이블 안에 클래스를 만들어서 table 을 넣으면 테이블의 형태가 데이지UI의 형태에 맞게 모양이 바뀌며,
table-fixed 는 게시물의 제목이 아무리 길어도 테이블 만큼의 선에서 ...처리로 더이상 글의 크기가 넘어가지 않게 해주는것이다.

<a class="btn-text-link block w-full truncate" : 풀이를 하자면,
a가 display 가 inline 이면 기본적으로 너비가 적용되지않는다
block을 줘야지 너비가 적용되기 때문에 block 을 넣었고,
너비가 있어야지 truncate 가 적용이된다.
w-full 은 너비가 100% 라는 의미이고, truncate 는 너비가 정해져있고 그 이상을 넘어가면 자른다는 의미이다.

lorem 을 작성하고 tab을 누르게 되면 아무글이나 길게 나오게되는것이다.

------
$('select[data-value]').each(function(index, el){
    const = $el = $(el);

    const defaultValue = $el.attr('data-value');
    $el.val(defaultValue);
});

 //$('select[data-value]') : select 를 검색한다는것인데 데이터벨류를 검색한다는 속성을 가지고있다.
// 각각 실행하라
// 이런 특징을 가진 값을 검색하면 index : 순번  el : 엘리먼트

// 최초에 $('select[data-value]') 이런 속성을 찾아내는데, $el.attr('data-value');에서 속성을 딱 한번 받아오고
// 받아온 속성을  $el.val(defaultValue); 여기 엘리먼트에게 넣어준다.
// view-source:http://localhost:8081/user/article/list?boardId=1&searchKeywordTypeCode=title&searchKeyword=11&page=5로 검색하고 ctrl + u해서 확인해볼 수 있다.
----
  <!-- 사이트 공통 js -->
  <script src="/static/js/common.js" defer></script> 여기에 있는 defer를 붙여줬기 때문에 html이 실행된 후 나중에 실행이 된다.
----

2022-12-27 ajax 방식으로 바꾼다.

UserArticleController에서
@RequestMapping("/user/article/doIncreaseHitCountRd")
  public ResultData<Integer> doIncreaseHitCountRd(int id) {
    }
    를 만들었다
http://localhost:8081/user/article/doIncreaseHitCount?id=2 이렇게 별도의 페이지로 뺄것이다.
위에 있는걸로 접속하면 아래에 있는,
http://localhost:8081/user/article/doIncreaseHitCountRd?id=2 로 바로 넘어가게 script설정을 detail 맨 하단에 해주었다.
===================================================
게시물 조회된것만 확인하면 되지 페이지 전체가 다시 로딩될 필요는 없기 때문에 ajax 처리를 해줬다.
<script>
  const params = {};
  params.id = parseInt('${param.id}');
</script>
<script>
  function ArticleDetail__increaseHitCount() {
  $.get('/user/article/deIncreaseHitCountRd',       -> 이부분은 form 이다. 이부분으로 날리겠다라는 뜻.
    {
      id : params.id,                               -> 그렇게 되면 id는 ?id=id 이런 방식으로 나오게 되는데 ?id=1, ?id=2, ?id=3 ... 이렇게 출력되는것이다. 상단 <script> 에서 params.id = parseInt('${param.id}'); 이렇게 아이디를 구했기 때문!
      ajaxMode: 'Y'
    }, function(data) {
      $('.article-detail__hit-count').empty().html(data.data1); > -> $('.article-detail__hit-count')에 있는 내용을 지우고 (data.data1) 여기 안에있는것으로 보여주겠다는 뜻. increase 하게되면 data1 은 조회수 인데 조회수를 보여주겠다는 뜻이다. 실제로 페이지에서 보여주는 조회수와 여기서 보여주는 조회수는 실제로 다르다 iframe 과 비슷한건데 iframe 을 대체한것이다.
    }, 'json');
  }
  $(function() {
   $(function() {
      // ArticleDetail__increaseHitCount();
       setTimeout(ArticleDetail__increaseHitCount, 3000);  -> 3초 뒤에 실행하겠다는 뜻.
       })
</script>
==========================
<!--
<script>
  location.href = 'http://localhost:8081/user/article/doIncreaseHitCountRd?id=2';
</script>
  -->
<!--
<iframe src="http://localhost:8081/user/article/doIncreaseHitCountRd?id=2" frameborder="0"></iframe>
  -->
이 두가지는 detail 맨 하단에 적었던 것들 둘중 하나 사용해도된다.

===========================
프로그램을 실행 할 때마다 하위 코드가 계속 실행되기 때문에 브라우저에서 한번 봤던 사람의 아이디를 기억해서 더이상 조회수가 올라가지 않게 기억을 해야 하기 때문에,
$(function() {
  // 실전코드
   // ArticleDetail__increaseHitCount();

   // 임시코드
    setTimeout(ArticleDetail__increaseHitCount(), 500);
    })

local storage 모던을 구글링한다.
localStorage와 sessionStorage가 있는데
localStorage는 데이터가 실제 영구적으로 브라우저에 남아있다.
localStorage.setItem('test', 1); 구글에서 긁어 온 코드를 보면 'test'가 변수명이고, 1은 값이다.

  function
  ArticleDetail__increaseHitCount() {
  const localStorageKey = 'article__' + ${param.id} + '__viewDone';
  localStorage.setItem('article', 1);

  if(localStorage.getItem('article', 1)) {
    return;
  }
   localStorage.setItem('article', true); -> 이 부분은 이미 한번 위에 코드가 실행되었다는 뜻이다.
이 스크립트 문법의 해석은 localStorage에 기록이 있으면 바로 return해서 보내버리는것이다.

========
http://172.30.1.79/user/article/detail?id=2 -> 접속 해보면 될것같은데 안되서 보류.

=========

== 크롬 개발자 도구 Network 와 Application 사용방법 ==
개발 프로젝트에서 F12 누르고 LocalStorage를 누르면 조회된 목록을 알 수 있고,
Network 에서 Preserve log 와 Disable cache 를 체크해놓지 않으면 통신되는것이 계속뜬다.
체크를 해놓은 상태로 봐야 정보가 남아있다.
체크 한 후 All로 F5 를 눌러서 보면 요청이 들어오는것을 확인할 수 있다.
올 누르면 정보가 쌓인다.
그리고 Fetch/XHR을 클릭해서 F5를 누르면 요청한 내용만 볼 수 있다.
그리고 Headers 를 누르게되면 내가 어떤방식으로 요청을 했는지 확인 할 수 있다.
계속 F5를 눌러서 보고싶지않다면 Name 에 떠있는 내역을 우클릭해서 Replay XHR을 누르면 또 요청을 보낼 수 있다.

========================
UserArticleRepository 에 mysql은 부등호 사용이 가능하나, 마이바티스는 부등호를 사용 할 수 없어서
> : &gt;
< : &lt;
로 작성해줘야한다.

getArticles : 순수한 아티클 객체만 반환
getForPrintArticles : +a 출력용 추가데이터 정보가 들어가있다.
=========================